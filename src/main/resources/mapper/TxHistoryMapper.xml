<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.blockchain.wallet.mapper.TxHistoryMapper">
  <resultMap id="BaseResultMap" type="org.blockchain.wallet.entity.TxHistory">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="tx_hash" jdbcType="VARCHAR" property="txHash" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="symbol" jdbcType="VARCHAR" property="symbol" />
    <result column="amount" jdbcType="VARCHAR" property="amount" />
    <result column="in_or_out" jdbcType="VARCHAR" property="inOrOut" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.blockchain.wallet.entity.TxHistory">
    <result column="dest" jdbcType="LONGVARCHAR" property="dest" />
  </resultMap>
  <sql id="Base_Column_List">
    id, tx_hash, address, symbol, amount, in_or_out, create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    dest
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tx_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectBySelective" parameterType="org.blockchain.wallet.entity.TxHistory" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tx_history
    where 1 = 1
    <if test="symbol != null">
      and symbol = #{symbol,jdbcType=VARCHAR}
    </if>
    <if test="txHash != null">
      and tx_hash = #{txHash,jdbcType=VARCHAR}
    </if>
    order by create_time desc
  </select>
  <select id="selectCount" parameterType="org.blockchain.wallet.entity.TxHistory" resultType="java.lang.Integer">
    select
    count(*)
    from tx_history
    where 1 = 1
    <if test="symbol != null">
      and symbol = #{symbol,jdbcType=VARCHAR}
    </if>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tx_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteAll" parameterType="java.lang.Integer">
    delete from tx_history
    where 1 = 1
    <if test="symbol != null">
      and symbol = #{symbol,jdbcType=VARCHAR}
    </if>
  </delete>
  <delete id="deleteByCreateTime" parameterType="org.blockchain.wallet.entity.TxHistory">
    delete from tx_history
    where 1 = 1
    <if test="symbol != null">
      and symbol = #{symbol,jdbcType=VARCHAR}
    </if>
    order by create_time asc limit 1
  </delete>
  <insert id="insert" parameterType="org.blockchain.wallet.entity.TxHistory">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tx_history (tx_hash, address, symbol, 
      amount, in_or_out, create_time, 
      update_time, dest)
    values (#{txHash,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{symbol,jdbcType=VARCHAR}, 
      #{amount,jdbcType=VARCHAR}, #{inOrOut,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{dest,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.blockchain.wallet.entity.TxHistory">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tx_history
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="txHash != null">
        tx_hash,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="symbol != null">
        symbol,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="inOrOut != null">
        in_or_out,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="dest != null">
        dest,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="txHash != null">
        #{txHash,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="symbol != null">
        #{symbol,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=VARCHAR},
      </if>
      <if test="inOrOut != null">
        #{inOrOut,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dest != null">
        #{dest,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.blockchain.wallet.entity.TxHistory">
    update tx_history
    <set>
      <if test="txHash != null">
        tx_hash = #{txHash,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="symbol != null">
        symbol = #{symbol,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=VARCHAR},
      </if>
      <if test="inOrOut != null">
        in_or_out = #{inOrOut,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dest != null">
        dest = #{dest,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.blockchain.wallet.entity.TxHistory">
    update tx_history
    set tx_hash = #{txHash,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      symbol = #{symbol,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=VARCHAR},
      in_or_out = #{inOrOut,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      dest = #{dest,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.blockchain.wallet.entity.TxHistory">
    update tx_history
    set tx_hash = #{txHash,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      symbol = #{symbol,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=VARCHAR},
      in_or_out = #{inOrOut,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>